import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# Get job parameters
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Define input and output locations
input_s3_path = "s3://put1/egmple/"
output_s3_path = "s3://newglue1"

# Read data from S3 (use the database and table name from the crawler)
datasource0 = glueContext.create_dynamic_frame.from_catalog(
    database="salesdb", 
    table_name="egmple", 
    transformation_ctx="datasource0"
)

# Convert DynamicFrame to DataFrame for Spark transformations
df = datasource0.toDF()

# Apply transformations (clean data)
# Drop duplicates
df_cleaned = df.dropDuplicates()

# Filter out records with null values in a specific column
# Replace 'column_name' with the actual column you want to filter on
df_cleaned = df_cleaned.filter(df_cleaned['store'].isNotNull())

# Coalesce to a single partition
df_cleaned_single = df_cleaned.coalesce(1)

# Convert back to DynamicFrame
cleaned_dynamic_frame = DynamicFrame.fromDF(df_cleaned_single, glueContext, "cleaned_dynamic_frame")

# Write the cleaned and merged data to the new S3 bucket
glueContext.write_dynamic_frame.from_options(
    frame=cleaned_dynamic_frame,
    connection_type="s3",
    connection_options={"path": output_s3_path},
    format="parquet",
    transformation_ctx="datasink2"
)

# Commit the job
job.commit()